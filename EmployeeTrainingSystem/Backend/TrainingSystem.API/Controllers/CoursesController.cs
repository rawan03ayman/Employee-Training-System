// Controllers/CoursesController.cs - FIXED VERSION
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TrainingSystem.Models;
using TrainingSystem.Services;
using System.Security.Claims;

namespace TrainingSystem.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class CoursesController : ControllerBase
    {
        private readonly CourseService _courseService;

        public CoursesController(CourseService courseService)
        {
            _courseService = courseService;
        }

        [HttpGet]
        public async Task<ActionResult<List<Course>>> GetCourses()
        {
            return await _courseService.GetAllCoursesAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Course>> GetCourse(string id)
        {
            var course = await _courseService.GetCourseByIdAsync(id);
            if (course == null)
                return NotFound();
            
            return course;
        }

        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult<Course>> CreateCourse(CreateCourseRequest request)
        {
            // Create course from request - don't require Id and CreatedBy in request
            var course = new Course
            {
                // Id will be generated by MongoDB
                Title = request.Title,
                Description = request.Description,
                Category = request.Category,
                Duration = request.Duration,
                Level = request.Level,
                Instructor = request.Instructor,
                StartDate = request.StartDate,
                EndDate = request.EndDate,
                MaxParticipants = request.MaxParticipants,
                CreatedBy = User.Identity.Name ?? User.FindFirst(ClaimTypes.NameIdentifier)?.Value,
                IsActive = true,
                CreatedAt = DateTime.UtcNow
            };

            var createdCourse = await _courseService.CreateCourseAsync(course);
            return CreatedAtAction(nameof(GetCourse), new { id = createdCourse.Id }, createdCourse);
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateCourse(string id, Course course)
        {
            var success = await _courseService.UpdateCourseAsync(id, course);
            if (!success)
                return NotFound();
            
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteCourse(string id)
        {
            var success = await _courseService.DeleteCourseAsync(id);
            if (!success)
                return NotFound();
            
            return NoContent();
        }
    }

    // Separate request model to avoid validation issues
    public class CreateCourseRequest
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public int Duration { get; set; }
        public string Level { get; set; }
        public string Instructor { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int MaxParticipants { get; set; }
    }
}